"use strict";(self.webpackChunkresourge_schema=self.webpackChunkresourge_schema||[]).push([[6e3],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>c});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=u(a),c=l,k=m["".concat(s,".").concat(c)]||m[c]||d[c]||r;return a?n.createElement(k,i(i({ref:t},p),{},{components:a})):n.createElement(k,i({ref:t},p))}));function c(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,i=new Array(r);i[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var u=2;u<r;u++)i[u]=a[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},4375:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>u});var n=a(7462),l=(a(7294),a(3905));const r={sidebar_position:1},i=void 0,o={unversionedId:"api/Rules",id:"api/Rules",title:"Rules",description:"Exists 3 types of rules:",source:"@site/docs/api/Rules.md",sourceDirName:"api",slug:"/api/Rules",permalink:"/docs/api/Rules",draft:!1,editUrl:"https://github.com/resourge/schema/docs/api/Rules.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Api",permalink:"/docs/category/api"},next:{title:"Array",permalink:"/docs/api/Array"}},s={},u=[{value:"Normal Rules",id:"normal-rules",level:2},{value:"test",id:"test",level:3},{value:"asyncTest",id:"asynctest",level:3},{value:"Compile",id:"compile",level:3},{value:"validate",id:"validate",level:3},{value:"isValid",id:"isvalid",level:3},{value:"S as shortname",id:"s-as-shortname",level:3},{value:"Mandatory Rules",id:"mandatory-rules",level:2},{value:"onlyOnTouch",id:"onlyontouch",level:3},{value:"notOnlyOnTouch",id:"notonlyontouch",level:3},{value:"required",id:"required",level:3},{value:"notRequired",id:"notrequired",level:3},{value:"optional",id:"optional",level:3},{value:"notOptional",id:"notoptional",level:3},{value:"nullable",id:"nullable",level:2},{value:"notNullable",id:"notnullable",level:3}],p={toc:u};function d(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Exists 3 types of rules:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{href:"Rules#normal-rules"},"Normal Rule")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{href:"Rules#mandatory-rules"},"Mandatory Rule")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{href:"Rules#when-rules"},"When Rule"))),(0,l.kt)("h2",{id:"normal-rules"},"Normal Rules"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Normal rule")," consist of 2 types of rules:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{href:"Rules#test"},"test")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{href:"Rules#asynctest"},"asyncTest"))),(0,l.kt)("p",null,"Also exists some predefined normal rules:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{href:"/docs/api/Any"},"Any")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{href:"/docs/api/Array"},"Array")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{href:"/docs/api/Boolean"},"Boolean")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{href:"/docs/api/Date"},"Date")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{href:"/docs/api/Number"},"Number")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{href:"/docs/api/Object"},"Object")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{href:"/docs/api/String"},"String"))),(0,l.kt)("p",null,'{{< alert icon="\ud83d\udca1" text="If you have rules that you normally use, please tell us so we can improve the package." />}}'),(0,l.kt)("h3",{id:"test"},"test"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"test")," is a normal sync validation."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"string()\n// value is the string value\n// form is the original value\n// In this case, test is expected to return either true or an array of errors\n.test((value, form) => [{\n  // key can be a empty string or a key\n  // In the case key is a empty string the system will replace it with original key\n  key: '', \n  error: 'Custom error Message'\n}])\n// or\n.test({\n  // In this case, test is a mandatory a boolean\n  test: (value, form) => true,\n  message: 'Custom error Message'\n})\n")),(0,l.kt)("h3",{id:"asynctest"},"asyncTest"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"asyncTest")," is a normal async validation."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"string()\n// value is the string value\n// form is the original value\n// In this case, test is expected to return a promise containing either true or an array of errors\n.asyncTest(\n  (value, form) => Promise.resolve([{\n    // key can be a empty string or a key\n    // In the case key is a empty string the system will replace it with original key\n    // NOTE: It does not handle the catch, it expect to always resolve the promise\n    key: '', \n    error: 'Custom error Message'\n  }])\n)\n// or\n.asyncTest({\n  // In this case, test is a mandatory a boolean\n  // NOTE: It does not handle the catch, it expect to always resolve the promise\n  test: (value, form) => Promise.resolve(true),\n  message: 'Custom error Message'\n})\n")),(0,l.kt)("h3",{id:"compile"},"Compile"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"compile")," is a method to generate the schema (it's recommended to use in every schema, otherwise ",(0,l.kt)("inlineCode",{parentName:"p"},"isValid")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"validate")," will still call it)."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"import { array, object, string } from '@resourge/schemas';\n\nconst schema = number().min(20).compile(); // calling compile\nconst isValid = schema.isValid();\n")),(0,l.kt)("p",null,"Compile Options"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"debug")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"Shows validation structure in a log. (only works in dev)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"onlyOnTouch")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"Set's default onlyOnTouch in every schema. (default false)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"defaultOptional")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"Set's default optional in every schema. (default undefined, meaning it will not validate if is optional or not)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"defaultNullable")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"Set's default nullable in every schema. (default undefined, meaning it will not validate if is nullable or not)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"messages")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"object")),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"Object containing all default messages (expect the specific message for the schema).")))),(0,l.kt)("h3",{id:"validate"},"validate"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"validate")," is a method to validate the data. Returns the errors."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"import { array, object, string } from '@resourge/schemas';\n\nconst schema = object({\n  age: number().min(20)\n}).compile();\n\nconst errors = schema.validate({ age: 10 }) \n")),(0,l.kt)("p",null,"Errors format:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"[\n  { \n    key: 'age',\n    error: 'Requires to have at least minimum size of 20'}\n  }\n]\n")),(0,l.kt)("h3",{id:"isvalid"},"isValid"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"isValid")," is a method to validate the data. Returns true or false."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"import { array, object, string } from '@resourge/schemas';\n\nconst schema = object({\n  age: number().min(20)\n}).compile();\n\nschema.isValid({ age: 10 }) // false\nschema.isValid({ age: 25 }) // true\n\n")),(0,l.kt)("h3",{id:"s-as-shortname"},"S as shortname"),(0,l.kt)("p",null,"Example using ",(0,l.kt)("inlineCode",{parentName:"p"},"S")," shortname from schema."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"import { PostalCodes } from '@resourge/schema/postalCodes';\n\nimport { S } from '@resourge/schema';\n\nconst user = {\n  name: 'Himaru',\n  age: 18,\n  postalCode: '1000-100'\n}\n\nconst schema = S.object({\n  name: S.string().required(),\n  age: S.number().min(16).required(),\n  postalCode: S.string().postalCode(PostalCodes.PT)\n}).compile();\n\nschema.isValid(user)\n\n")),(0,l.kt)("h2",{id:"mandatory-rules"},"Mandatory Rules"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Mandatory rule")," are rules that come before ",(0,l.kt)("inlineCode",{parentName:"p"},"Normal Rule")," and in case they fail ",(0,l.kt)("inlineCode",{parentName:"p"},"Normal Rule")," will not be called."),(0,l.kt)("h3",{id:"onlyontouch"},"onlyOnTouch"),(0,l.kt)("p",null,"Makes validation only if values were ",(0,l.kt)("inlineCode",{parentName:"p"},"touched"),". By default, all validation will work regardless of ",(0,l.kt)("inlineCode",{parentName:"p"},"touches"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"string().onlyOnTouch()\n")),(0,l.kt)("p",null,"Requires an array of strings ",(0,l.kt)("inlineCode",{parentName:"p"},"keys")," to validate camp. Only keys present will validate."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"object({\n  name: string().required().onlyOnTouch(),\n  age: number().min(18).required().onlyOnTouch(),\n  address: object({\n city: string().onlyOnTouch(),\n street: string().onlyOnTouch()\n  })\n}).validate(objectVariable, [\n 'name',\n 'age',\n 'address.city',\n 'address.street'\n])\n")),(0,l.kt)("h3",{id:"notonlyontouch"},"notOnlyOnTouch"),(0,l.kt)("p",null,"Makes validation validate regardless of ",(0,l.kt)("inlineCode",{parentName:"p"},"touch"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"string().notOnlyOnTouch()\n")),(0,l.kt)("h3",{id:"required"},"required"),(0,l.kt)("p",null,"Makes validation check if value is null or undefined. By default schemas only validate type."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"string().required()\n")),(0,l.kt)("h3",{id:"notrequired"},"notRequired"),(0,l.kt)("p",null,"Makes validation required (meaning it can be null and undefined)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"string().notRequired()\n")),(0,l.kt)("h3",{id:"optional"},"optional"),(0,l.kt)("p",null,"Makes validation check if value is undefined. By default schemas only validate type."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"string().optional()\n")),(0,l.kt)("h3",{id:"notoptional"},"notOptional"),(0,l.kt)("p",null,"Makes validation optional (meaning it can not be undefined)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"string().notOptional()\n")),(0,l.kt)("h2",{id:"nullable"},"nullable"),(0,l.kt)("p",null,"Makes validation check if value is null. By default schemas only validate type."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"string().nullable()\n")),(0,l.kt)("h3",{id:"notnullable"},"notNullable"),(0,l.kt)("p",null,"Makes validation nullable (meaning it can not be null)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"string().notNullable()\n")))}d.isMDXComponent=!0}}]);